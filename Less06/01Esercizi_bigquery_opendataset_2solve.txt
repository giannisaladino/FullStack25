## 20 Esercizi Intermedi con BigQuery Public Datasets

Parte 1: GROUP BY (Esercizi 1-7)

Esercizio 1: Analisi delle nascite per anno
-- Dataset: bigquery-public-data.usa_names.usa_1910_current
-- Calcola il numero totale di nascite per ogni anno

SELECT 
  year,
  SUM(number) as total_births
FROM `bigquery-public-data.usa_names.usa_1910_current`
GROUP BY year
ORDER BY year DESC;

Esercizio 2: Nomi più popolari per genere
-- Dataset: bigquery-public-data.usa_names.usa_1910_current
-- Trova i 10 nomi più popolari per ogni genere

SELECT 
  gender,
  name,
  SUM(number) as total_count
FROM `bigquery-public-data.usa_names.usa_1910_current`
GROUP BY gender, name
ORDER BY gender, total_count DESC
LIMIT 20;


Esercizio 3: Media delle temperature per stazione meteo
-- Dataset: bigquery-public-data.noaa_gsod
-- Calcola la temperatura media per ogni stazione nell'anno 2020

SELECT 
  stn,
  ROUND(AVG(temp), 2) as avg_temp,
  COUNT(*) as observations
FROM `bigquery-public-data.noaa_gsod.gsod2020`
WHERE temp < 200  -- filtra valori invalidi
GROUP BY stn
HAVING observations > 300
ORDER BY avg_temp DESC;


Esercizio 4: Conteggio citazioni GitHub per linguaggio
-- Dataset: bigquery-public-data.github_repos
-- Conta i repository per linguaggio

SELECT 
  language,
  COUNT(*) as repo_count
FROM `bigquery-public-data.github_repos.languages`
WHERE language IS NOT NULL
GROUP BY language
ORDER BY repo_count DESC
LIMIT 15;


Esercizio 5: Analisi criminalità Chicago per tipo
-- Dataset: bigquery-public-data.chicago_crime
-- Raggruppa i crimini per tipo primario e anno

SELECT 
  primary_type,
  EXTRACT(YEAR FROM date) as year,
  COUNT(*) as crime_count
FROM `bigquery-public-data.chicago_crime.crime`
WHERE date >= '2020-01-01'
GROUP BY primary_type, year
ORDER BY year DESC, crime_count DESC;

Esercizio 6: Spesa media dei taxi NYC per distretto
-- Dataset: bigquery-public-data.new_york_taxi_trips
-- Calcola la tariffa media per distretto di pickup

SELECT 
  pickup_location_id,
  ROUND(AVG(fare_amount), 2) as avg_fare,
  ROUND(AVG(trip_distance), 2) as avg_distance,
  COUNT(*) as trip_count
FROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2020`
WHERE fare_amount > 0 AND trip_distance > 0
GROUP BY pickup_location_id
HAVING trip_count > 1000
ORDER BY avg_fare DESC;


Esercizio 7: Aggregazione con ROLLUP
-- Analisi gerarchica delle nascite per stato e anno
-- Dataset: bigquery-public-data.usa_names.usa_1910_current

SELECT 
  state,
  year,
  SUM(number) as total_births
FROM `bigquery-public-data.usa_names.usa_1910_current`
WHERE year >= 2010
GROUP BY ROLLUP(state, year) --subtotal and total
ORDER BY state, year;


Parte 2: JOIN (Esercizi 8-14)

Esercizio 8: JOIN tra tabelle GitHub
-- Unisce informazioni su repository e linguaggi
-- Dataset: bigquery-public-data.github_repos

SELECT 
  r.repo_name,
  l.language,
  l.bytes
FROM `bigquery-public-data.github_repos.sample_repos` r
INNER JOIN `bigquery-public-data.github_repos.languages` l
  ON r.repo_name = l.repo_name
WHERE l.bytes > 100000
ORDER BY l.bytes DESC
LIMIT 100 

Esercizio 9: LEFT JOIN per analisi completezza dati
-- Controlla quali stazioni meteo hanno dati mancanti da stazioni e gsod2020
-- Dataset: bigquery-public-data.noaa_gsod

SELECT 
  s.usaf,
  s.name as station_name,
  COUNT(g.stn) as records_count
FROM `bigquery-public-data.noaa_gsod.stations` s
LEFT JOIN `bigquery-public-data.noaa_gsod.gsod2020` g
  ON s.usaf = g.stn
WHERE s.country = 'IT'
GROUP BY s.usaf, s.name
ORDER BY records_count DESC;


Esercizio 11: Self JOIN per comparazioni
-- Confronta nomi maschili e femminili con lo stesso spelling
-- Dataset: bigquery-public-data.usa_names.usa_1910_current

SELECT 
  m.name,
  m.number as male_count,
  f.number as female_count,
  m.year
FROM `bigquery-public-data.usa_names.usa_1910_current` m
INNER JOIN `bigquery-public-data.usa_names.usa_1910_current` f
  ON m.name = f.name AND m.year = f.year
WHERE m.gender = 'M' 
  AND f.gender = 'F'
  AND m.year = 2020
ORDER BY m.number DESC;

Esercizio 12: Multiple JOIN
-- Combina dati da più tabelle GitHub
-- Dataset: bigquery-public-data.github_repos


SELECT 
  r.repo_name,
  l.language,
  c.author.name as author_name,
  c.author.email
FROM `bigquery-public-data.github_repos.sample_repos` r
INNER JOIN `bigquery-public-data.github_repos.languages` l
  ON r.repo_name = l.repo_name
INNER JOIN `bigquery-public-data.github_repos.sample_commits` c
  ON r.repo_name = c.repo_name
WHERE l.language = 'Python'
LIMIT 50;

Esercizio 13: JOIN con aggregazione
-- Conta i commits per linguaggio
-- Dataset: bigquery-public-data.github_repos

SELECT 
  l.language,
  COUNT(DISTINCT c.commit) as commit_count,
  COUNT(DISTINCT c.repo_name) as repo_count
FROM `bigquery-public-data.github_repos.languages` l
INNER JOIN `bigquery-public-data.github_repos.sample_commits` c
  ON l.repo_name = c.repo_name
GROUP BY l.language
HAVING commit_count > 100
ORDER BY commit_count DESC
LIMIT 20;


Esercizio 14: JOIN con subquery
-- Trova i nomi più popolari che sono usati da entrambi i generi
-- Dataset: bigquery-public-data.usa_names.usa_1910_current

WITH unisex_names AS (
  SELECT name
  FROM `bigquery-public-data.usa_names.usa_1910_current`
  WHERE year = 2020
  GROUP BY name
  HAVING COUNT(DISTINCT gender) = 2
)

SELECT 
  u.name,
  n.gender,
  SUM(n.number) as total_count
FROM unisex_names u
INNER JOIN `bigquery-public-data.usa_names.usa_1910_current` n
  ON u.name = n.name
WHERE n.year = 2020
GROUP BY u.name, n.gender
ORDER BY u.name;

Parte 3: VIEWS (Esercizi 15-20)

Esercizio 15: VIEW semplice per dati filtrati
-- Crea una view dei nomi popolari degli ultimi 5 anni recent_popular_names
-- Dataset: bigquery-public-data.usa_names.usa_1910_current

CREATE OR REPLACE VIEW `tuo-progetto.tuo_dataset.recent_popular_names` AS
SELECT 
  year,
  name,
  gender,
  SUM(number) as total_count
FROM `bigquery-public-data.usa_names.usa_1910_current`
WHERE year >= 2019
GROUP BY year, name, gender
HAVING total_count > 1000;

-- Query sulla view
SELECT * FROM `tuo-progetto.tuo_dataset.recent_popular_names`
ORDER BY total_count DESC
LIMIT 20;

Esercizio 16: VIEW con JOIN
-- View che combina repository e linguaggi repo_languages_summary
-- Dataset: bigquery-public-data.github_repos.languages

CREATE OR REPLACE VIEW `tuo-progetto.tuo_dataset.repo_languages_summary` AS
SELECT 
  r.repo_name,
  l.language,
  l.bytes,
  r.watch_count
FROM `bigquery-public-data.github_repos.sample_repos` r
INNER JOIN `bigquery-public-data.github_repos.languages` l
  ON r.repo_name = l.repo_name
WHERE l.bytes > 0;

-- Query sulla view
SELECT 
  language,
  COUNT(*) as repo_count,
  AVG(watch_count) as avg_watches
FROM `tuo-progetto.tuo_dataset.repo_languages_summary`
GROUP BY language
ORDER BY repo_count DESC;

Esercizio 17: VIEW con aggregazione complessa
-- View per statistiche meteo mensili monthly_weather_stats
-- Dataset: bigquery-public-data.noaa_gsod.gsod2020

CREATE OR REPLACE VIEW `tuo-progetto.tuo_dataset.monthly_weather_stats` AS
SELECT 
  stn,
  EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', CAST(year || mo || da AS STRING))) as month,
  ROUND(AVG(temp), 2) as avg_temp,
  ROUND(MAX(max), 2) as max_temp,
  ROUND(MIN(min), 2) as min_temp,
  COUNT(*) as days_recorded
FROM `bigquery-public-data.noaa_gsod.gsod2020`
WHERE temp < 200
GROUP BY stn, month;

-- Query sulla view
SELECT * FROM `tuo-progetto.tuo_dataset.monthly_weather_stats`
WHERE month = 7
ORDER BY avg_temp DESC
LIMIT 10;

Esercizio 18: Materialized VIEW per performance
-- View materializzata per query frequenti

CREATE MATERIALIZED VIEW `tuo-progetto.tuo_dataset.crime_by_year_type`
AS
SELECT 
  EXTRACT(YEAR FROM date) as year,
  primary_type,
  COUNT(*) as crime_count,
  COUNT(DISTINCT district) as districts_affected
FROM `bigquery-public-data.chicago_crime.crime`
GROUP BY year, primary_type;

-- Query sulla materialized view (molto più veloce)
SELECT * FROM `tuo-progetto.tuo_dataset.crime_by_year_type`
WHERE year = 2020
ORDER BY crime_count DESC;

Esercizio 19: VIEW con window functions
-- View con ranking dei nomi per anno
CREATE OR REPLACE VIEW `tuo-progetto.tuo_dataset.name_rankings` AS
SELECT 
  year,
  name,
  gender,
  number,
  RANK() OVER (PARTITION BY year, gender ORDER BY number DESC) as rank
FROM `bigquery-public-data.usa_names.usa_1910_current`
WHERE year >= 2010;

-- Query per trovare i top 10 di ogni anno
SELECT * FROM `tuo-progetto.tuo_dataset.name_rankings`
WHERE rank <= 10
ORDER BY year DESC, gender, rank;

Esercizio 20: VIEW con UNION
-- View che unisce dati da più anni
CREATE OR REPLACE VIEW `tuo-progetto.tuo_dataset.multi_year_weather` AS
SELECT stn, temp, date, 2020 as year
FROM `bigquery-public-data.noaa_gsod.gsod2020`
WHERE temp < 200
UNION ALL
SELECT stn, temp, date, 2019 as year
FROM `bigquery-public-data.noaa_gsod.gsod2019`
WHERE temp < 200;

-- Query sulla view
SELECT 
  year,
  AVG(temp) as avg_temp
FROM `tuo-progetto.tuo_dataset.multi_year_weather`
GROUP BY year
ORDER BY year;

